"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstalledVersionPackageJsonFactory = void 0;
const st = require("scripting-tools");
const addCache_1 = require("../tools/addCache");
const path_1 = require("path");
const fs = require("fs");
const tsafe_1 = require("tsafe");
function getInstalledVersionPackageJsonFactory(params) {
    const { projectPath } = params;
    const getTargetModulePath = (params) => {
        const { nodeModuleName } = params;
        try {
            return st.find_module_path(nodeModuleName, projectPath);
        }
        catch (_a) { }
        return (function callee(thePath) {
            const theDirname = (0, path_1.dirname)(thePath);
            (0, tsafe_1.assert)(theDirname !== thePath);
            return (0, path_1.basename)(theDirname) === "node_modules" ? thePath : callee(theDirname);
        })(require.resolve(nodeModuleName, { "paths": [projectPath] }));
    };
    /** Throw if not installed locally */
    const getInstalledVersionPackageJson = (0, addCache_1.addCache)(async (params) => {
        const { nodeModuleName } = params;
        //NOTE: Can throw
        // node_modules/js-yaml
        const targetModulePath = getTargetModulePath({ nodeModuleName });
        return JSON.parse(await new Promise((resolve, reject) => fs.readFile((0, path_1.join)(targetModulePath, "package.json"), (err, buff) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(buff.toString("utf8"));
        })));
    });
    return { getInstalledVersionPackageJson };
}
exports.getInstalledVersionPackageJsonFactory = getInstalledVersionPackageJsonFactory;
//# sourceMappingURL=getInstalledVersionPackageJson.js.map