"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsedImportExportStatement = void 0;
const tsafe_1 = require("tsafe");
var ParsedImportExportStatement;
(function (ParsedImportExportStatement) {
    let ParsedArgument;
    (function (ParsedArgument) {
        function parse(argument) {
            if (argument.startsWith(".")) {
                return (0, tsafe_1.id)({
                    "type": "PROJECT LOCAL FILE",
                    "relativePath": argument
                });
            }
            if (/^(https?:)?\/\//i.test(argument)) {
                return (0, tsafe_1.id)({
                    "type": "URL",
                    "url": argument
                });
            }
            {
                let [nodeModuleName, ...rest] = argument.split("/");
                if (nodeModuleName.startsWith("@") && rest.length !== 0) {
                    const [scopedNodeModuleName, ...restNew] = rest;
                    nodeModuleName = `${nodeModuleName}/${scopedNodeModuleName}`;
                    rest = restNew;
                }
                return (0, tsafe_1.id)({
                    "type": "DEPENDENCY",
                    nodeModuleName,
                    "specificImportPath": rest.join("/") || undefined
                });
            }
        }
        ParsedArgument.parse = parse;
        function stringify(parsedArgument) {
            switch (parsedArgument.type) {
                case "PROJECT LOCAL FILE":
                    return parsedArgument.relativePath;
                case "DEPENDENCY": {
                    const { nodeModuleName, specificImportPath } = parsedArgument;
                    return `${nodeModuleName}${specificImportPath ? `/${specificImportPath}` : ``}`;
                }
                case "URL":
                    return parsedArgument.url;
            }
        }
        ParsedArgument.stringify = stringify;
    })(ParsedArgument = ParsedImportExportStatement.ParsedArgument || (ParsedImportExportStatement.ParsedArgument = {}));
    function parse(importExportStatement) {
        importExportStatement = importExportStatement.replace(/\s+^/, "").replace(/$\s+/, "");
        const isAsyncImport = importExportStatement.endsWith(")");
        const quoteSymbol = importExportStatement.endsWith(`'${isAsyncImport ? ")" : ""}`) ? "'" : '"';
        const parsedArgument = ParsedImportExportStatement.ParsedArgument.parse(importExportStatement.match(new RegExp(`^[^${quoteSymbol}]*${quoteSymbol}([^${quoteSymbol}]+)${quoteSymbol}[^${quoteSymbol}]*$`))[1]);
        if (isAsyncImport) {
            return (0, tsafe_1.id)({
                "isAsyncImport": true,
                quoteSymbol,
                parsedArgument
            });
        }
        if (new RegExp(`^declare\\s+module\\s+${quoteSymbol}`).test(importExportStatement)) {
            return (0, tsafe_1.id)({
                parsedArgument,
                "isAsyncImport": false,
                quoteSymbol,
                "statementType": "declare module"
            });
        }
        if (new RegExp(`^import\\s+${quoteSymbol}`).test(importExportStatement)) {
            return (0, tsafe_1.id)({
                parsedArgument,
                "isAsyncImport": false,
                quoteSymbol,
                "statementType": "import",
                "target": undefined
            });
        }
        const statementType = importExportStatement.startsWith("import") ? "import" : "export";
        const isTypeOnly = /^(?:import|export)\s+type/.test(importExportStatement);
        const target = importExportStatement
            .match(new RegExp(`^(?:import|export)(?:\\s+type)?\\s*([^${quoteSymbol}]+)${quoteSymbol}`))[1]
            .replace(/\s*from\s*$/, "");
        return (0, tsafe_1.id)({
            "isAsyncImport": false,
            parsedArgument,
            isTypeOnly,
            quoteSymbol,
            statementType,
            target
        });
    }
    ParsedImportExportStatement.parse = parse;
    function stringify(parsedImportExportStatement) {
        const { quoteSymbol, parsedArgument } = parsedImportExportStatement;
        const quotedArgument = `${quoteSymbol}${ParsedImportExportStatement.ParsedArgument.stringify(parsedArgument)}${quoteSymbol}`;
        if (parsedImportExportStatement.isAsyncImport) {
            return `import(${quotedArgument})`;
        }
        if (parsedImportExportStatement.statementType === "declare module") {
            return `declare module ${quotedArgument}`;
        }
        if (parsedImportExportStatement.target === undefined) {
            return `import ${quotedArgument}`;
        }
        const { statementType, isTypeOnly, target } = parsedImportExportStatement;
        return [statementType, ...(isTypeOnly ? ["type"] : []), target, "from", quotedArgument].join(" ");
    }
    ParsedImportExportStatement.stringify = stringify;
})(ParsedImportExportStatement = exports.ParsedImportExportStatement || (exports.ParsedImportExportStatement = {}));
//# sourceMappingURL=ParsedImportExportStatement.js.map