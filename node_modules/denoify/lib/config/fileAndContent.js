"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const YAML = require("yaml");
const _1 = require(".");
function tryParseAsYamlCompatible(content) {
    try {
        return YAML.parse(content);
    }
    catch (_a) {
        return undefined;
    }
}
function parseConfig({ configFileBasename, configFileRawContent }) {
    if (configFileBasename === undefined ||
        configFileRawContent === undefined ||
        !_1.default.supportedConfigFile.find(configFile => configFileBasename.endsWith(configFile))) {
        return {
            type: "absent"
        };
    }
    if ((configFileBasename === ".denoifyrc" ||
        configFileBasename.endsWith(".json") ||
        configFileBasename.endsWith(".yaml") ||
        configFileBasename.endsWith(".yml")) &&
        tryParseAsYamlCompatible(configFileRawContent)) {
        return {
            type: "yaml",
            configFileBasename,
            configFileRawContent
        };
    }
    if (configFileBasename.endsWith(".cjs") || configFileBasename.endsWith(".js")) {
        return {
            type: "js",
            configFileBasename,
            configFileRawContent
        };
    }
    return {
        type: "absent"
    };
}
function getFileTypeAndContent({ getConfigFileRawContent }) {
    return _1.default.supportedConfigFile.reduce(async (configFileType, configFileBasename) => {
        var _a;
        if ((await configFileType).type !== "absent") {
            return configFileType;
        }
        const configFileRawContent = await getConfigFileRawContent(configFileBasename);
        if (!configFileRawContent || (configFileBasename === _1.default.packageJson && !((_a = tryParseAsYamlCompatible(configFileRawContent)) === null || _a === void 0 ? void 0 : _a.denoify))) {
            return configFileType;
        }
        return parseConfig({
            configFileBasename,
            configFileRawContent
        });
    }, Promise.resolve({ type: "absent" }));
}
exports.default = getFileTypeAndContent;
//# sourceMappingURL=fileAndContent.js.map